import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#-----------------------------------------------------------------

data = pd.read_csv(r"sales_data_sample.csv",encoding='Latin-1')
data.head()

#-------------------------------------------------------------------

data.shape

#------------------------------------------------------------------

# Number of NAN values per column in the dataset
data.isnull().sum()

#----------------------------------------------------------------------

data.drop(["ORDERNUMBER", "PRICEEACH", "ORDERDATE", "PHONE", "ADDRESSLINE1", "ADDRESSLINE2", "CITY", "STATE", "TERRITORY", "POSTALCODE", "CONTACTLASTNAME", "CONTACTFIRSTNAME"], axis = 1, inplace=True)

#----------------------------------------------------------------------------

data.head()

#----------------------------------------------------------------------------

data.isnull().sum()

#-----------------------------------------------------------------------------

data.describe()

#-------------------------------------------------------------

sns.countplot(data = data , x = 'STATUS')

#----------------------------------------------------------

sns.histplot(x = 'SALES' , hue = 'PRODUCTLINE', data = data,
             element="poly")

#-----------------------------------------------------------------

data['PRODUCTLINE'].unique()

#------------------------------------------------------------

#checking the duplicated values 
data.drop_duplicates(inplace=True)

#---------------------------------------------------

data.info()

#--------------------------------------------------------

list_cat = data.select_dtypes(include=['object']).columns.tolist()
list_cat

#-------------------------------------------------------------------

for i in list_cat:
  sns.countplot(data = data ,x = i)
  plt.xticks(rotation = 90)
  plt.show()4

#----------------------------------------------------------------------

#dealing with the catagorical features 
from sklearn import preprocessing
le = preprocessing.LabelEncoder()

# Encode labels in column 'species'.
for i in list_cat:
  data[i]= le.fit_transform(data[i])

#---------------------------------------------------------------------------\

data.info()

#--------------------------------------------------------------------------

data['SALES'] = data['SALES'].astype(int)

#----------------------------------------------------------------------

data.info()

#------------------------------------------------------------------------

data.describe()

#--------------------------------------------------------------------------

## taget feature are Sales and productline
X = data[['SALES','PRODUCTCODE']]

#---------------------------------------------------------------------------

data.columns

#--------------------------------------------------------------------------

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

#iris = load_iris()
#X = pd.DataFrame(iris.data, columns=iris['feature_names'])
#print(X)
#data = X[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)']]
X = data[['SALES','PRODUCTCODE']]
sse = {}
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, max_iter=100).fit(data)
    X["clusters"] = kmeans.labels_
    #print(data["clusters"])
    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center
plt.figure()
plt.plot(list(sse.keys()), list(sse.values()))
plt.xlabel("Number of cluster")
plt.ylabel("SSE (Sum of Squared Errors)")
plt.show()

#----------------------------------------------------------------------------------------

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=4, init='k-means++', random_state=0).fit(X)

#------------------------------------------------------------------------------------

print("Labels:",kmeans.labels_)

print("inertia:",kmeans.inertia_)

print("iterations:",kmeans.n_iter_)

print("cluster-centers: ",kmeans.cluster_centers_)

#--------------------------------------------------------------------------------------

#getting the size of the clusters 
from collections import Counter
Counter(kmeans.labels_)

#-------------------------------------------------------------------------------------

sns.scatterplot(data=X, x="SALES", y="PRODUCTCODE", hue=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], 
            marker="X", c="r", s=80, label="centroids")
plt.legend()
plt.show()

#---------------------------------------------------------------------------------------

